# Generated by Django 4.1 on 2022-11-17 12:34

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import ticketing.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("has_signed_up", models.BooleanField(default=False)),
                ("matriculation_date", models.DateField(null=True)),
                ("pname", models.CharField(max_length=100)),
                ("psurname", models.CharField(max_length=100)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="AllowedUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("userkind_enum", models.CharField(max_length=30)),
                ("username", models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="PromoCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20)),
                ("description", models.CharField(max_length=200)),
                ("value", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="TicketAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20, unique=True)),
                ("quantity", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("is_visible", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="TicketExtra",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20)),
                ("name", models.CharField(max_length=100)),
                ("price", models.IntegerField()),
                ("label", models.CharField(max_length=100)),
                ("opt_out", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="TicketKind",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("price", models.IntegerField()),
                ("requires_first", models.BooleanField(default=False)),
                (
                    "allocation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kinds",
                        to="ticketing.ticketallocation",
                    ),
                ),
                (
                    "optional_extras",
                    models.ManyToManyField(
                        blank=True, related_name="kinds", to="ticketing.ticketextra"
                    ),
                ),
            ],
            options={
                "db_table": "ticketkinds",
            },
        ),
        migrations.CreateModel(
            name="UserKind",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("allowance", models.IntegerField()),
                (
                    "payment_method",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="userkinds",
                        to="ticketing.paymentmethod",
                    ),
                ),
                (
                    "ticket_kinds",
                    models.ManyToManyField(
                        db_table="userkind_ticketkinds", to="ticketing.ticketkind"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Wave",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enum", models.CharField(max_length=20)),
                ("name", models.CharField(max_length=100)),
                (
                    "ticket_kinds",
                    models.ManyToManyField(
                        db_table="ticketkinds_waves",
                        related_name="waves",
                        to="ticketing.ticketkind",
                    ),
                ),
                (
                    "user_kinds",
                    models.ManyToManyField(
                        db_table="userkinds_waves",
                        related_name="waves",
                        to="ticketing.userkind",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("is_own", models.BooleanField()),
                (
                    "uuid",
                    models.CharField(
                        default=ticketing.models.gen_ticket_id, max_length=13
                    ),
                ),
                ("date_applied", models.DateTimeField(auto_now_add=True)),
                ("last_changed", models.DateTimeField(auto_now=True)),
                ("has_paid", models.BooleanField(default=False)),
                ("date_paid", models.DateTimeField(null=True)),
                ("is_veg", models.BooleanField(default=False)),
                ("is_alc", models.BooleanField(default=False)),
                (
                    "extras",
                    models.ManyToManyField(
                        blank=True, related_name="tickets", to="ticketing.ticketextra"
                    ),
                ),
                (
                    "kind",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to="ticketing.ticketkind",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to="ticketing.paymentmethod",
                    ),
                ),
                (
                    "purchaser",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tickets",
            },
        ),
        migrations.CreateModel(
            name="Setting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_wave",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="ticketing.wave"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="kind",
            field=models.ForeignKey(
                default=5,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="users",
                to="ticketing.userkind",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="ticket",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_own", True)),
                fields=("purchaser",),
                name="unique_own_ticket_user",
            ),
        ),
    ]
